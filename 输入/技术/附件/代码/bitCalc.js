var countBits = function (n) {
    log('1: ', n);                                                                                   1100
    log('2: ', n>>>1); // 二进制右移一位, 得到奇数位                                                   110 // 结果
    log('3: ', (n>>>1 & 0x55555555)); //  0x55555555.toString(2)= 101 0101 0101 0101 0101 0101 0101 0101 奇数位移到偶数位
    log('4: ', n - ((n >>> 1) & 0x55555555)); // 12 - 4 = 8 (1000)                                   100 // 上一步结果 十进制 4
    n = n - ((n >>> 1) & 0x55555555);
    log('5: ', n >>> 2); // 右移两位  1000 -> 10                                                10    
    log('6: ', (n >>> 2) & 0x33333333); // 0x33333333.toString(2)= 110011001100110011001100110011 // 1 和 0 每隔两位交替出现
    log('7: ', n & 0x33333333);  // 1000 & 0x3333333 = 0000 = 0                                10 // 上一步结果
    log('8: ', (n & 0x33333333) + ((n >>> 2) & 0x33333333));
    n = (n & 0x33333333) + ((n >>> 2) & 0x33333333);
    log('9: ', n >>> 4);
    log('10: ', (n >>> 4) & 0xF0F0F0F);   // 0xf0f0f0f.toString(2) = 1111000011110000111100001111 每四位一组进行与运算，与四位1与可得1的个数
    log('11: ', (n + (n >>> 4) & 0xF0F0F0F)); 
    log('12: ', (n + (n >>> 4) & 0xF0F0F0F) * 0x1010101); // 0x1010101.toString(2) = 1000000010000000100000001 每八位一组，与最后一位进行与运算
    log('13: ', ((n + (n >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24);
    return ((n + (n >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
  };

  function log(i, n) {
      console.log(i, n, n.toString(2));
  }

  let r = countBits(17);
  console.log('r: ', r);